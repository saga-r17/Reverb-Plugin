declare filename "dspfaust.dsp"; declare name "dspfaust"; declare version "2.54.11";
declare compile_options "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path0 "/libraries/all.lib";
declare library_path1 "/libraries/webaudio.lib";
declare library_path2 "/libraries/wdmodels.lib";
declare library_path3 "/libraries/version.lib";
declare library_path4 "/libraries/vaeffects.lib";
declare library_path5 "/libraries/synths.lib";
declare library_path6 "/libraries/spats.lib";
declare library_path7 "/libraries/soundfiles.lib";
declare library_path8 "/libraries/signals.lib";
declare library_path9 "/libraries/routes.lib";
declare library_path10 "/libraries/reverbs.lib";
declare library_path11 "/libraries/reducemaps.lib";
declare library_path12 "/libraries/quantizers.lib";
declare library_path13 "/libraries/physmodels.lib";
declare library_path14 "/libraries/stdfaust.lib";
declare library_path15 "/libraries/phaflangers.lib";
declare library_path16 "/libraries/noises.lib";
declare library_path17 "/libraries/oscillators.lib";
declare library_path18 "/libraries/misceffects.lib";
declare library_path19 "/libraries/mi.lib";
declare library_path20 "/libraries/maths.lib";
declare library_path21 "/libraries/interpolators.lib";
declare library_path22 "/libraries/hoa.lib";
declare library_path23 "/libraries/filters.lib";
declare library_path24 "/libraries/fds.lib";
declare library_path25 "/libraries/envelopes.lib";
declare library_path26 "/libraries/dx7.lib";
declare library_path27 "/libraries/demos.lib";
declare library_path28 "/libraries/delays.lib";
declare library_path29 "/libraries/compressors.lib";
declare library_path30 "/libraries/basics.lib";
declare library_path31 "/libraries/analyzers.lib";
declare library_path32 "/libraries/aanl.lib";
declare library_path33 "/libraries/platform.lib";
declare aanl_lib_name "Faust Antialiased Nonlinearities";
declare aanl_lib_version "0.3";
declare analyzers_lib_name "Faust Analyzer Library";
declare analyzers_lib_version "0.2";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.9";
declare compressors_lib_name "Faust Compressor Effect Library";
declare compressors_lib_version "0.4";
declare delays_lib_name "Faust Delay Library";
declare delays_lib_version "0.1";
declare demos_lib_name "Faust Demos Library";
declare demos_lib_version "0.1";
declare envelopes_lib_adsre_author "Julius O. Smith III";
declare envelopes_lib_adsre_licence "STK-4.3";
declare envelopes_lib_author "GRAME";
declare envelopes_lib_copyright "GRAME";
declare envelopes_lib_license "LGPL with exception";
declare envelopes_lib_name "Faust Envelope Library";
declare envelopes_lib_version "0.2";
declare fds_lib_author "Romain Michon";
declare fds_lib_name "Faust Finite Difference Schemes Library";
declare fds_lib_version "0.0";
declare filename "FaustDSP";
declare filters_lib_lowpass0_highpass1 "MIT-style STK-4.3 license";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_version "0.3";
declare hoa_lib_author "Pierre Guillot";
declare hoa_lib_copyright "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8, 2019 Wargreen, 2022 Bonardi, Goutmann";
declare hoa_lib_name "High Order Ambisonics library";
declare hoa_lib_version "0.4";
declare interpolators_lib_name "Faust Interpolator Library";
declare interpolators_lib_version "0.3";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare mi_lib_author "Romain Michon";
declare mi_lib_copyright "2018-2020 GRAME / GIPSA-Lab";
declare mi_lib_name "Faust mass-interaction physical modelling library";
declare mi_lib_version "0.0";
declare misceffects_lib_name "Misc Effects Library";
declare misceffects_lib_version "2.0";
declare name "FaustDSP";
declare noises_lib_name "Faust Noise Generator Library";
declare noises_lib_version "0.4";
declare oscillators_lib_name "Faust Oscillator Library";
declare oscillators_lib_version "0.3";
declare phaflangers_lib_name "Faust Phaser and Flanger Library";
declare phaflangers_lib_version "0.1";
declare physmodels_lib_name "Faust Physical Models Library";
declare physmodels_lib_version "0.1";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.3";
declare quantizers_lib_name "Faust Frequency Quantization Library";
declare quantizers_lib_version "0.1";
declare reducemaps_lib_author "Yann Orlarey (orlarey at grame.fr)";
declare reducemaps_lib_copyright "Grame";
declare reducemaps_lib_license "LGPL with exception";
declare reducemaps_lib_name "Reduce Library";
declare reducemaps_lib_version "0.1";
declare reverbs_lib_name "Faust Reverb Library";
declare reverbs_lib_version "0.2";
declare routes_lib_name "Faust Signal Routing Library";
declare routes_lib_version "0.2";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "0.3";
declare soundfiles_lib_name "Faust Soundfile Library";
declare soundfiles_lib_version "0.7";
declare spats_lib_name "Faust Spatialization Library";
declare spats_lib_version "0.0";
declare synths_lib_name "Faust Synthesizer Library";
declare synths_lib_version "0.1";
declare vaeffects_lib_name "Faust Virtual Analog Filter Effect Library";
declare vaeffects_lib_version "0.2";
declare wdmodels_lib_name "Faust Wave Digital Model Library";
declare wdmodels_lib_version "0.2.1";
declare webaudio_lib_author "GRAME";
declare webaudio_lib_copyright "GRAME";
declare webaudio_lib_license "LGPL with exception";
declare webaudio_lib_name "Faust WebAudio Filters Library";
declare webaudio_lib_version "0.1";
ID_0 = (65536 : int);
ID_1 = _, ID_0;
ID_2 = (ID_1 : %);
ID_3 = (1 : mem);
ID_4 = _, ID_3;
ID_5 = (ID_4 : +);
ID_6 = ID_2 ~ ID_5;
ID_7 = (ID_6 : float);
ID_8 = ID_7, 6.2831855f;
ID_9 = (ID_8 : *);
ID_10 = (65536 : float);
ID_11 = ID_9, ID_10;
ID_12 = ID_11 : /;
ID_13 = (ID_12 : sin);
ID_14 = nentry("midi_frequency", 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
ID_15 = hslider("bend", 0.0f, -2.0f, 2.0f, 0.01f);
ID_16 = ID_15, 12.0f;
ID_17 = (ID_16 : /);
ID_18 = 2.0f, ID_17;
ID_19 = (ID_18 : pow);
ID_20 = ID_14, ID_19;
ID_21 = (ID_20 : *);
ID_22 = button("midi_gate");
ID_23 = ID_22, 0;
ID_24 = (ID_23 : >);
ID_25 = _, ID_24;
ID_26 = (ID_25 : *);
ID_27 = + ~ ID_26;
ID_28 = (ID_24 : ID_27);
ID_29 = hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f);
ID_30 = fconstant(int fSamplingFreq, <math.h>);
ID_31 = 1.0f, ID_30;
ID_32 = (ID_31 : max);
ID_33 = 1.92e+05f, ID_32;
ID_34 = (ID_33 : min);
ID_35 = ID_29, ID_34;
ID_36 = ID_35 : *;
ID_37 = (ID_36 : int);
ID_38 = ID_28, ID_37;
ID_39 = (ID_38 : <);
ID_40 = _, mem;
ID_41 = ID_40 : -;
ID_42 = _, 0;
ID_43 = (ID_42 : >);
ID_44 = ID_43, _;
ID_45 = ID_44 : *;
ID_46 = ID_41 <: ID_45;
ID_47 = _ <: ID_46;
ID_48 = (ID_24 : ID_47);
ID_49 = ID_39, ID_48;
ID_50 = (ID_49 : |);
ID_51 = hslider("Sustain", 0.2f, 0.0f, 1.0f, 0.01f);
ID_52 = (ID_24 : float);
ID_53 = ID_51, ID_52;
ID_54 = (ID_53 : *);
ID_55 = ID_54, ID_24;
ID_56 = ID_50, ID_55;
ID_57 = (ID_56 : select2);
ID_58 = 0.0f, ID_57;
ID_59 = ID_24, ID_58;
ID_60 = ID_59 : select2;
ID_61 = (ID_60 : \(x37).(\(x38).(((1.0f,(((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x37 : *),((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x38 : *) : +)~_));
ID_62 = ID_61, 1000;
ID_63 = (ID_62 : *);
ID_64 = nentry("midi_gain", 1.0f, 0.0f, 1.0f, 0.01f);
ID_65 = ID_63, ID_64;
ID_66 = (ID_65 : *);
ID_67 = hslider("mod_ratio", 2.0f, 0.0f, 2e+01f, 0.01f);
ID_68 = (ID_67 : \(x39).(\(x40).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x39 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x40 : *) : +)~_));
ID_69 = ID_21, ID_68;
ID_70 = (ID_69 : *);
ID_71 = _, ID_70;
ID_72 = ID_71 : +;
ID_73 = (ID_72 : \(x41).((65537,((((_,(65536 : int) : %)~(_,(1 : mem) : +) : float),6.2831855f : *),(65536 : float) : / : sin),((0,(_,(x41,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x12).(x12,(x12 : floor) : -))~_ : _,(65536 : float) : * : int) : rdtable),((((0,(_,(x41,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x13).(x13,(x13 : floor) : -))~_ : _,65536.0f : *),((0,(_,(x41,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x13).(x13,(x13 : floor) : -))~_ : _,65536.0f : * : floor) : -),((65537,((((_,(65536 : int) : %)~(_,(1 : mem) : +) : float),6.2831855f : *),(65536 : float) : / : sin),(((0,(_,(x41,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x12).(x12,(x12 : floor) : -))~_ : _,(65536 : float) : * : int),1 : +) : rdtable),(65537,((((_,(65536 : int) : %)~(_,(1 : mem) : +) : float),6.2831855f : *),(65536 : float) : / : sin),((0,(_,(x41,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x12).(x12,(x12 : floor) : -))~_ : _,(65536 : float) : * : int) : rdtable) : -) : *) : +));
ID_74 = ID_21, 1;
ID_75 = (ID_74 : -);
ID_76 = hslider("modulation", 0.0f, 0.0f, 1.0f, 0.001f);
ID_77 = (ID_76 : \(x42).(\(x43).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x42 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x43 : *) : +)~_));
ID_78 = ID_75, ID_77;
ID_79 = (ID_78 : *);
ID_80 = _, ID_79;
ID_81 = (ID_80 : *);
ID_82 = ID_73 ~ ID_81;
ID_83 = ID_66, ID_82;
ID_84 = (ID_83 : *);
ID_85 = ID_21, ID_84;
ID_86 = (ID_85 : +);
ID_87 = ID_86, ID_34;
ID_88 = (ID_87 : /);
ID_89 = _, ID_88;
ID_90 = (ID_89 : +);
ID_91 = ID_90, 0;
ID_92 = 0, ID_91;
ID_93 = ID_92 : select2;
ID_94 = (ID_93 : \(x12).(x12,(x12 : floor) : -));
ID_95 = ID_94 ~ _;
ID_96 = _, ID_10;
ID_97 = ID_96 : *;
ID_98 = ID_95 : ID_97;
ID_99 = (ID_98 : int);
ID_100 = ID_13, ID_99;
ID_101 = 65537, ID_100;
ID_102 = (ID_101 : rdtable);
ID_103 = (ID_60 : \(x51).(\(x52).(((1.0f,(((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x51 : *),((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x52 : *) : +)~_));
ID_104 = ID_103, 1000;
ID_105 = (ID_104 : *);
ID_106 = ID_105, ID_64;
ID_107 = (ID_106 : *);
ID_108 = (ID_67 : \(x53).(\(x54).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x53 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x54 : *) : +)~_));
ID_109 = ID_21, ID_108;
ID_110 = (ID_109 : *);
ID_111 = _, ID_110;
ID_112 = ID_111 : +;
ID_113 = (ID_112 : \(x55).((65537,((((_,(65536 : int) : %)~(_,(1 : mem) : +) : float),6.2831855f : *),(65536 : float) : / : sin),((0,(_,(x55,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x12).(x12,(x12 : floor) : -))~_ : _,(65536 : float) : * : int) : rdtable),((((0,(_,(x55,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x13).(x13,(x13 : floor) : -))~_ : _,65536.0f : *),((0,(_,(x55,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x13).(x13,(x13 : floor) : -))~_ : _,65536.0f : * : floor) : -),((65537,((((_,(65536 : int) : %)~(_,(1 : mem) : +) : float),6.2831855f : *),(65536 : float) : / : sin),(((0,(_,(x55,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x12).(x12,(x12 : floor) : -))~_ : _,(65536 : float) : * : int),1 : +) : rdtable),(65537,((((_,(65536 : int) : %)~(_,(1 : mem) : +) : float),6.2831855f : *),(65536 : float) : / : sin),((0,(_,(x55,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : +),0 : select2 : \(x12).(x12,(x12 : floor) : -))~_ : _,(65536 : float) : * : int) : rdtable) : -) : *) : +));
ID_114 = (ID_76 : \(x56).(\(x57).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x56 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x57 : *) : +)~_));
ID_115 = ID_75, ID_114;
ID_116 = (ID_115 : *);
ID_117 = _, ID_116;
ID_118 = (ID_117 : *);
ID_119 = ID_113 ~ ID_118;
ID_120 = ID_107, ID_119;
ID_121 = (ID_120 : *);
ID_122 = ID_21, ID_121;
ID_123 = (ID_122 : +);
ID_124 = ID_123, ID_34;
ID_125 = (ID_124 : /);
ID_126 = _, ID_125;
ID_127 = (ID_126 : +);
ID_128 = ID_127, 0;
ID_129 = 0, ID_128;
ID_130 = ID_129 : select2;
ID_131 = (ID_130 : \(x13).(x13,(x13 : floor) : -));
ID_132 = ID_131 ~ _;
ID_133 = _, 65536.0f;
ID_134 = ID_133 : *;
ID_135 = (ID_132 : ID_134);
ID_136 = (ID_135 : floor);
ID_137 = ID_135, ID_136;
ID_138 = (ID_137 : -);
ID_139 = ID_99, 1;
ID_140 = (ID_139 : +);
ID_141 = ID_13, ID_140;
ID_142 = 65537, ID_141;
ID_143 = (ID_142 : rdtable);
ID_144 = ID_143, ID_102;
ID_145 = (ID_144 : -);
ID_146 = ID_138, ID_145;
ID_147 = (ID_146 : *);
ID_148 = ID_102, ID_147;
ID_149 = (ID_148 : +);
ID_150 = (ID_60 : \(x58).(\(x59).(((1.0f,(((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x58 : *),((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("midi_gate"),0 : >),hslider("Release", 0.6f, 0.01f, 8.0f, 0.01f),((((button("midi_gate"),0 : > : +~(_,(button("midi_gate"),0 : >) : *)),(hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("midi_gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),hslider("Decay", 0.6f, 0.01f, 8.0f, 0.01f),hslider("Attack", 0.01f, 0.01f, 4.0f, 0.01f) : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x59 : *) : +)~_));
ID_151 = ID_149, ID_150;
ID_152 = ID_151 : *;
ID_153 = _, _;
ID_154 = ID_152 <: ID_153;
process = ID_154;
